openapi: 3.0.0

info:
  version: "0.0.1"
  title: OpenDES File Service
  description: |
    The File service provides internal and external APIs to request file location data, such as an individual signed URL per file.

servers:
  - url: os-file.a.run.app

paths:
  /getLocationFunction:
    post:
      description: |
        Creates a new location in the landing zone, such as a GCS bucket.
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/Partition'
      requestBody:
        $ref: '#/components/requestBodies/LocationRequest'
      responses:
        '200':
          description: |
            Created location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/Bad-Request'
        '5XX':
          description: Unexpected error.
  /getFileLocationFunction:
    post:
      description: |
        Returns file `Location` and `Driver`.
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/Partition'
      requestBody:
        $ref: '#/components/requestBodies/FileLocationRequest'
      responses:
        '200':
          description: |
            File location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileLocationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/Bad-Request'
        '5XX':
          description: Unexpected error.
  /getFilesListFunction:
    post:
      description: |
        Allows the application to audit the attempted file uploads. The method is internal and isn't available for third-party applications.
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/Partition'
      requestBody:
        $ref: '#/components/requestBodies/FilesListRequest'
      responses:
        '200':
          description: |
            Files list page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/Bad-Request'
        '5XX':
          description: Unexpected error.

components:
  parameters:
    Authorization:
      in: header
      name: Authorization
      description: |
        Authorization token as `"Bearer: {token}"`
      required: true
      schema:
        type: string
    Partition:
      in: header
      name: Partition-Id
      description: |
        A unique identifier of a tenant
      required: true
      schema:
        type: string
  schemas:
    DateTime:
      type: string
      format: date-time
    FileID:
      type: string
      pattern: ^[\w,\s-]+(\.\w+)?$
    Driver:
      type: string
      enum:
        - GCP
        - AWS
    FileLocation:
      type: object
      properties:
        FileID:
          $ref: '#/components/schemas/FileID'
        Driver:
          $ref: '#/components/schemas/Driver'
        Location:
          type: string
        CreatedAt:
          type: string
          format: date-time
        CreatedBy:
          type: string
    ApiError:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        errors:
          type: array
          items:
            type: string
    LocationResponse:
      type: object
      properties:
        FileID:
          $ref: '#/components/schemas/FileID'
        Location:
          type: object
          additionalProperties:
            type: string
          example:
            SignedURL: 'GCS signed URL'
    FileLocationResponse:
      type: object
      properties:
        Driver:
          $ref: '#/components/schemas/Driver'
        Location:
          type: string
    FilesListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/FileLocation'
        number:
          type: integer
        numberOfElements:
          type: integer
        size:
          type: integer

  requestBodies:
    LocationRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              FileID:
                $ref: '#/components/schemas/FileID'
    FileLocationRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              FileID:
                $ref: '#/components/schemas/FileID'
            required:
              - FileID
    FilesListRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              TimeFrom:
                $ref: '#/components/schemas/DateTime'
              TimeTo:
                $ref: '#/components/schemas/DateTime'
              PageNum:
                type: integer
              Items:
                type: integer
              UserID:
                type: string
  responses:
    Unauthorized:
      description: Unauthorized
    Bad-Request:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
